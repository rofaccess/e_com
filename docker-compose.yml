# From:
# - https://danielabaron.me/blog/rails-postgres-docker/
# - https://www.digitalocean.com/community/tutorials/containerizing-a-ruby-on-rails-application-for-development-with-docker-compose-es
# - https://medium.com/@luismiguel.cabezas/docker-para-programadores-rails-parte-1-51b7313cba36
# - https://medium.com/@luismiguel.cabezas/docker-para-programadores-rails-parte-2-2686d12f23ef
# - https://medium.com/simform-engineering/dockerize-your-rails-7-app-3223cc851129

# Los cambios en este archivo no requieren regenerar la imagen pero si apagar y levantar de nuevo el contenedor
services:
  postgres:
    image: postgres:9.6 # Construir desde una imagen específica de PostgreSQL
    volumes:
      # Volumen nombrado para persistir la base de datos. Formato: "named_volume:path/in/container"
      - db_pg_data:/var/lib/postgresql/data
      # Montaje en host para iniciar una sola vez. Formato: "./path/on/host:/path/in/container"
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      # Mapea el puerto por defecto de postgres a otro puerto en el host .Formato: "host:container"
      - "5434:5432"
    env_file: .env
    environment:
      # Define la contraseña del superuser de PostgreSQL
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}

  dev:
    build: . # Construye en base al Dockerfile encontrado en el directorio donde se ejecuta docker-compose up
    # Para que command funcione, exec "$@" debe existir en el entrypoint o bien no se debe hacer referencia al entrypoint en el Dockerfile
    # Comando para depurar, descomentar la siguiente línea para depurar, osino se ejecutará el CMD del Dockerfile
    # command: rdebug-ide --host 0.0.0.0 --port 1234 --dispatcher-port 26162 -- script/rails s -b 0.0.0.0
    # Las siguientes líneas están a modo de ejemplo, actualmente en el Dockerfile ya está especificado con el comando CMD
    # command: rake db:migrate && bundle exec rails s -b 0.0.0.0 # Este formato permite ejecutar un solo comando
    # command: bash -c "rake db:migrate && rails s -p 3000 -b '0.0.0.0'" # Este formato permite ejecutar más de un comando dentro de las comillas dobles
    volumes:
      # Montaje bind. Monta el código de Rails del host en el directorio /app del contenedor.
      # Esto permite que los cambios de código en el host se reflejen de inmediato en el contenedor.
      - .:/app
      - gem_cache:/usr/local/bundle/gems # Guarda las gemas en un volumen. Se debe eliminar el volumen al modificar las gemas
      # Para que no se vuelvan a instalar las gema al borrar la imagen, es importante que en el Dockerfile se copie primero el Gemfile
      # y se instalen las gemas antes de copiar el resto del proyecto
    env_file: .env
    environment: # Define variables de entorno que serán utilizados dentro de la aplicación Rails
      - RAILS_ENV=development
      - DATABASE_USER=${DATABASE_USER}
      - DATABASE_PASSWORD=${DATABASE_PASSWORD}
      - DATABASE_PORT=5432
      - DATABASE_HOST=postgres # Notar que el host es postgres en referencia al servicio definido aquí
        # Si se desea ejecutar la aplicacion directamente en el host y no en un contenedor el host
        # debe ser localhost, aunque esto es un depende.
      - SMPT_ADDRESS=${SMPT_ADDRESS}
      - SMPT_PORT=${SMPT_PORT}
      - SMPT_DOMAIN=${SMPT_DOMAIN}
      - SMPT_USER_NAME=${SMPT_USER_NAME}
      - SMPT_PASSWORD=${SMPT_PASSWORD}
      - JWT_SECRET_TOKEN=${JWT_SECRET_TOKEN}
      - REPORTS_ROW_PER_PAGE=${REPORTS_ROW_PER_PAGE}

    ports:
      - "3000:3000" # Asigna el puerto 3000 del host al puerto 3000 del contenedor
      - "1234:1234" # Puerto para depuración

    depends_on:
      - postgres  # Referencia al servicio postgres definido mas arriba, esto indica que se va a crear el servicio rails
      # luego del servicio postgres, aunque esto no asegura que postgres ya esté listo para ser usado por rails.

  # Run in Terminal with: docker-compose run test or docker-compose exec app bundle exec rspec
  test:
    build: .
    # Ejecutar tests: docker-compose run test
    command: bundle exec rspec
    # Alternativo: Se ejecuta con bash y se la pasa la variable de entorno, lo cual es innecesario
    # command: bash -c "RAILS_ENV=test bundle exec rspec"
    # Depurar tests: docker-compose up test
    # Importante usar up test para que se realice el mapeo de puertos y se pueda conectar el depurador
    # bin/rake spec funciona dentro del contenedor pero si se usa aquí se genera un subroceso que con el que el depurador no se puede conectar
    # command: rdebug-ide --host 0.0.0.0 --port 1235 --dispatcher-port 26163 -- bin/rspec spec/controllers/home_controller_spec.rb
    # command: rdebug-ide --host 0.0.0.0 --port 1235 --dispatcher-port 26163 -- bin/rake spec
    # Depurar tests (alternativo): docker-compose up test
    # command: bash -c "rdebug-ide --host 0.0.0.0 --port 1235 --dispatcher-port 26163 -- rdebug-ide --host 0.0.0.0 --port 1235 --dispatcher-port 26163 -- bin/rspec spec/controllers/home_controller_spec.rb"
    volumes:
      - .:/app
      - gem_cache:/usr/local/bundle/gems
    env_file: .env
    environment:
      - RAILS_ENV=test
      - DATABASE_USER=${DATABASE_USER}
      - DATABASE_PASSWORD=${DATABASE_PASSWORD}
      - DATABASE_PORT=5432
      - DATABASE_HOST=postgres
      - JWT_SECRET_TOKEN=${JWT_SECRET_TOKEN}
      - REPORTS_ROW_PER_PAGE=${REPORTS_ROW_PER_PAGE}
    ports:
      - "1235:1235"
    depends_on:
      - postgres

volumes:
  db_pg_data:
  gem_cache:
